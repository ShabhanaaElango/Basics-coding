// Right half pyramid pattern(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=i;j++)
        {
            printf("* ");
        }
        printf("\n");
    }

    return 0;
}
// Right half pyramid pattern(number) 
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=i;j++)
        {
            printf("%d",i);
        }
        printf("\n");
    }

    return 0;
}
// Right half pyramid pattern(alphabets)
#include <stdio.h>

int main() {
    int n;
    char a = 'A';
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=i;j++)
        {
            printf("%c",a);
        }
        a++;
        printf("\n");
    }

    return 0;
}
// Right half pyramid pattern(alphabets)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=i;j++)
        {
            printf("%c",'A'-1+j);
        }

        printf("\n");
    }

    return 0;
}
// Left half pyramid pattern(*)
#include <stdio.h>
int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n-i;j++)
        {
            printf(" ");
        }
            for(int k=1;k<=i;k++)
            {
                printf("*");
            }
            printf("\n");
    }

    return 0;
}
// Left half pyramid pattern(numbers)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n-i;j++)
        {
            printf(" ");
        }
            for(int k=1;k<=i;k++)
            {
                printf("%d",k);
            }
            printf("\n");
    }

    return 0;
}
// Left half pyramid pattern(alphabets)
#include <stdio.h>

int main() {
    int n;
    char a = 'A';
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n-i;j++)
        {
            printf(" ");
        }
            for(int k=1;k<=i;k++)
            {
                printf("%c",(a+k-1));
            }
            printf("\n");
    }

    return 0;
}

// Inverted right half pyramid(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=n;i>=1;i--)
    {
        for(int j=1;j<=i;j++)
        {
            printf("* ");
        }
        printf("\n");
    }
    return 0;
}
// Inverted right half pyramid(numbers)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=n;i>=1;i--)
    {
        for(int j=1;j<=i;j++)
        {
            printf("%d ",j);
        }
        printf("\n");
    }
    return 0;
}

// Inverted right half pyramid(alphabets)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=n;i>=1;i--)
    {
        for(int j=1;j<=i;j++)
        {
            printf("%c ",('A'+ j - 1));
        }
        printf("\n");
    }
    return 0;
}
// Inverted left half pyramid(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<i;j++)
        {
            printf(" ");
        }
        for(int k=5;k>=i;k--)
        {
            printf("*");
        }
        printf("\n");
    }
    return 0;
}
// Inverted left half pyramid(numbers)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<i;j++)
        {
            printf(" ");
        }
        for(int k=5;k>=i;k--)
        {
            printf("%d",n-k+1);
        }
        printf("\n");
    }
    return 0;
}
// Inverted left half pyramid(alphabets)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<i;j++)
        {
            printf(" ");
        }
        for(int k=5;k>=i;k--)
        {
            printf("%c",('A'+i-1));
        }
        printf("\n");
    }
    return 0;
}
// Full Pyramid problem(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n-i;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=i;k++)
        {
            printf("* ");
        }
        printf("\n");
    }

    return 0;
}
// Full Pyramid problem(numbers)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n-i;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=i;k++)
        {
            printf("%d ",i);
        }
        printf("\n");
    }

    return 0;
}

// Full Pyramid problem(alphabets)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n-i;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=i;k++)
        {
            printf("%c ",('A'+k-1));
        }
        printf("\n");
    }

    return 0;
}
// Inverted full pyramid(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<i;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=n-i+1;k++)
        {
            printf("* ");
        }
        printf("\n");
    }

    return 0;
}
// Inverted full pyramid(numbers)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<i;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=n-i+1;k++)
        {
            printf("%d ",k);
        }
        printf("\n");
    }

    return 0;
}
// Inverted full pyramid(alphabets)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<i;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=n-i+1;k++)
        {
            printf("%c ",('A'+ i -1));
        }
        printf("\n");
    }

    return 0;
}
// Diamond pattern(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=2*n;i++)
    {
        int c;
        
        if(n<i)
        {
            c = 2*n-i;
        }
        else
        {
            c = i;
        }
        for(int j=1;j<=n-c;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=c;k++)
        {
            printf("* ");
        }
        printf("\n");
    }

    return 0;
}
// Diamond pattern(numbers)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=2*n;i++)
    {
        int c;
        
        if(n<i)
        {
            c = 2*n-i;
        }
        else
        {
            c = i;
        }
        for(int j=1;j<=n-c;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=c;k++)
        {
            printf("%d ",c);
        }
        printf("\n");
    }
// Diamond pattern(Alphabets)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=2*n;i++)
    {
        int c;
        
        if(n<i)
        {
            c = 2*n-i;
        }
        else
        {
            c = i;
        }
        for(int j=1;j<=n-c;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=c;k++)
        {
            printf("%c ",'A'+k-1);
        }
        printf("\n");
    }

    return 0;
}
// Hour-glass pattern(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<2*n;i++)
    {
        int c;
        
        if(n<i)
        {
            c = 2*n-i;
        }
        else
        {
            c = i;
        }
        for(int j=1;j<c;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=n-c+1;k++)
        {
            printf("* ");
        }
        printf("\n");
    }

    return 0;
}
// Hour-glass pattern(numbers)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<2*n;i++)
    {
        int c;
        
        if(n<i)
        {
            c = 2*n-i;
        }
        else
        {
            c = i;
        }
        for(int j=1;j<c;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=n-c+1;k++)
        {
            printf("%d ",c);
        }
        printf("\n");
    }

    return 0;
}
// Hour-glass pattern(Alphabets)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<2*n;i++)
    {
        int c;
        
        if(n<i)
        {
            c = 2*n-i;
        }
        else
        {
            c = i;
        }
        for(int j=1;j<c;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=n-c+1;k++)
        {
            printf("%c ",'A'+c-1);
        }
        printf("\n");
    }

    return 0;
}
//Hollow Pyramid(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n-i;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=i;k++){
            if(k==1||k==i||i==n)
                printf("* ");
            else
                printf("  ");
        }
        printf("\n");
    }

    return 0;
}
// Inverted hollow  pyramid(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<i;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=n-i+1;k++)
        {
            if(i==1||k==1||k==n-i+1)
                printf("* ");
            else
                printf("  ");
        }
        printf("\n");
    }

    return 0;
}
//Hollow diamond problem(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=2*n;i++)
    {
        int c;
        
        if(n<i)
        {
            c = 2*n-i;
        }
        else
        {
            c = i;
        }
        for(int j=1;j<=n-c;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=c;k++)
        {
            if(k==1||k==c)
                printf("* ");
            else
                printf("  ");
        }
        
        printf("\n");
    }

    return 0;
}
// Full square pattern(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            printf("* ");
        }
        printf("\n");
    }

    return 0;
}
// Hollow square pattern(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(i==1||i==n||j==1||j==n)
                printf("* ");
            else
                printf("  ");
        }
        printf("\n");
    }

    return 0;
}
// Rhombus pattern(*)
#include <stdio.h>

int main() {
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n-i;j++)
        {
            printf(" ");
        }
        for(int k=1;k<=n;k++)
             printf("* ");
    printf("\n");
    }

    return 0;
}
// Floyd's Triangle(numbers)
#include <stdio.h>

int main() {
    int n;
    int k=1;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=i;j++)
        {
            printf("%d ",k++);
        }
    printf("\n");
    }

    return 0;
}
//Pascal's Triangle
#include<stdio.h>
int main(){
    int rows,cf=1;
    scanf("%d",&rows);
    for(int i=0;i<rows;i++){
        for(int j=1;j<=rows-i;j++){
            printf(" ");
        }
        for(int k=0;k<=i;k++){
            if((i==0)||(k==0))
                cf=1;
            else
                cf =cf*(i-k+1)/k;
        printf("%d ",cf);
        }
        printf("\n");
    }
}
